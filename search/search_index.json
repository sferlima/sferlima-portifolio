{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"P\u00e1gina Inicial Este reposit\u00f3rio portf\u00f3lio \u00e9 um local para registrar meu aprendizados durante meu est\u00e1gio na Stefanini Brasil. Voc\u00ea pode encontrar mais informa\u00e7\u00f5es sobre mim na sess\u00e3o Sobre Mim. Sobre mim Ol\u00e1, Meu nome \u00e9 Shirley Ferreira Lima , atualmente tenho 19 anos e vivo na capital de S\u00e3o Paulo, Brasil. Desde 2024 tenho me aventurado no mundo da tecnologia onde iniciei com estudos auton\u00f4mos sobre javascript e em julho de 2024 comecei meu tecn\u00f3logo em an\u00e1lise e desenvolvimento de sistemas na S\u00e3o Paulo Tech School , uma faculdade que al\u00e9m de se preocupar com o desenvolvimento t\u00e9cnico dos alunos tamb\u00e9m busca o desenvolvimento social e emocional deles. A faculdade, junto com parcerias de empresas de tecnologia, tr\u00e1s o processo simb\u00edose, para al\u00e9m da sala de aula aprendermos com o mundo real o funcionamento do mercado de tecnologia. Com isso, no segundo semestre inicia minha jornada na Stefanini , onde iniciei meu est\u00e1gio em fevereiro de 2025, na c\u00e9lula do Banco do Brasil para aprender mais sobre desenvolvimento e onde sigo crescendo cada vez mais. Mais informa\u00e7\u00f5es sobre mim em: GitHub Profissional GitHub Acad\u00eamico Linkedin Estudos Durante meu est\u00e1gio na Stefanini estou tendo muitas oportunidades para explorar diversas tecnologias e conceitos, os quais podem ser encontrados resumos sobre na sess\u00e3o Estudos Projetos Durante minha gradua\u00e7\u00e3o em An\u00e1lise e Desenvolvimento de Sistemas tive a oportunidade de participar de alguns projetos. SiloTech - SiloSignal GamerCave Respira SP","title":"P\u00e1gina Inicial"},{"location":"#pagina-inicial","text":"Este reposit\u00f3rio portf\u00f3lio \u00e9 um local para registrar meu aprendizados durante meu est\u00e1gio na Stefanini Brasil. Voc\u00ea pode encontrar mais informa\u00e7\u00f5es sobre mim na sess\u00e3o Sobre Mim.","title":"P\u00e1gina Inicial"},{"location":"#sobre-mim","text":"Ol\u00e1, Meu nome \u00e9 Shirley Ferreira Lima , atualmente tenho 19 anos e vivo na capital de S\u00e3o Paulo, Brasil. Desde 2024 tenho me aventurado no mundo da tecnologia onde iniciei com estudos auton\u00f4mos sobre javascript e em julho de 2024 comecei meu tecn\u00f3logo em an\u00e1lise e desenvolvimento de sistemas na S\u00e3o Paulo Tech School , uma faculdade que al\u00e9m de se preocupar com o desenvolvimento t\u00e9cnico dos alunos tamb\u00e9m busca o desenvolvimento social e emocional deles. A faculdade, junto com parcerias de empresas de tecnologia, tr\u00e1s o processo simb\u00edose, para al\u00e9m da sala de aula aprendermos com o mundo real o funcionamento do mercado de tecnologia. Com isso, no segundo semestre inicia minha jornada na Stefanini , onde iniciei meu est\u00e1gio em fevereiro de 2025, na c\u00e9lula do Banco do Brasil para aprender mais sobre desenvolvimento e onde sigo crescendo cada vez mais.","title":"Sobre mim"},{"location":"#mais-informacoes-sobre-mim-em","text":"GitHub Profissional GitHub Acad\u00eamico Linkedin","title":"Mais informa\u00e7\u00f5es sobre mim em:"},{"location":"#estudos","text":"Durante meu est\u00e1gio na Stefanini estou tendo muitas oportunidades para explorar diversas tecnologias e conceitos, os quais podem ser encontrados resumos sobre na sess\u00e3o Estudos","title":"Estudos"},{"location":"#projetos","text":"Durante minha gradua\u00e7\u00e3o em An\u00e1lise e Desenvolvimento de Sistemas tive a oportunidade de participar de alguns projetos. SiloTech - SiloSignal GamerCave Respira SP","title":"Projetos"},{"location":"estudos/","text":"Estudos \u27ad Angular \u27ad SpringBoot \u27ad Git e GitHub \u27ad Conceitos \u27ad","title":"Estudos"},{"location":"estudos/#estudos","text":"","title":"Estudos"},{"location":"estudos/#angular","text":"","title":"\u27ad Angular"},{"location":"estudos/#springboot","text":"","title":"\u27ad SpringBoot"},{"location":"estudos/#git-e-github","text":"","title":"\u27ad Git e GitHub"},{"location":"estudos/#conceitos","text":"","title":"\u27ad Conceitos"},{"location":"estudos/#_1","text":"","title":"\u27ad"},{"location":"estudos/Git%20e%20Github/Git_e_Github/","text":"Git e GitHub o que \u00e9 git e github Git \u00e9 um sistema de controle de vers\u00f5es amplamente utilizado para gerenciamento de projetos de software. Ele permite rastrear altera\u00e7\u00f5es no c\u00f3digo-fonte, facilitando a colabora\u00e7\u00e3o e o controle do hist\u00f3rico de desenvolvimento. GitHub, por sua vez, \u00e9 uma plataforma online para hospedagem de reposit\u00f3rios Git, funcionando tamb\u00e9m como uma rede social para desenvolvedores. Al\u00e9m de armazenar projetos remotamente, o GitHub oferece recursos para descoberta de projetos de outros usu\u00e1rios, colabora\u00e7\u00e3o e divulga\u00e7\u00e3o de portf\u00f3lios como este. Um elemento fundamental em todo reposit\u00f3rio \u00e9 o arquivo README.md, que serve como apresenta\u00e7\u00e3o e documenta\u00e7\u00e3o do projeto, facilitando o entendimento e poss\u00edveis contribui\u00e7\u00f5es. \u00c9 poss\u00edvel incrementar o README com selos informativos utilizando o shields.io , como status do projeto, tamanho do reposit\u00f3rio, licen\u00e7a, entre outras coisas relevantes. configura\u00e7\u00f5es iniciais no git bash git config --global user.name \"seu_nome\" git config --global user.email \"seu_email\" Principais Comandos Git git init \u2013 Inicializa um novo reposit\u00f3rio local. git clone url_repositorio \u2013 Clona um reposit\u00f3rio remoto. git add arquivo OU git add . \u2013 Adiciona arquivos para o pr\u00f3ximo commit. git status \u2013 Exibe o status dos arquivos no diret\u00f3rio de trabalho. git commit -m 'texto do commit' \u2013 Registra as altera\u00e7\u00f5es feitas. git pull \u2013 Baixa as altera\u00e7\u00f5es do reposit\u00f3rio remoto. git push \u2013 Envia commits para o reposit\u00f3rio remoto. Branches Branches permitem criar diferentes linhas de desenvolvimento sem afetar o c\u00f3digo principal. Como criar e trocar de branch: Criando a branch: git branch nome_branch Trocando para a branch criada: git checkout nome_branch ou git switch nome_branch Criando e trocando: git switch -c nome_branch ou git checkout -b nome_branch Como mesclar as branchs: Volte para a branch principal: git checkout master ou git switch master Fa\u00e7a o merge: git merge nome_branch Deletar uma branch: git branch -d nome_branch Commits Podemos ter uma vis\u00e3o geral dos commits por meio do grafo de commits com os comandos: git log git log --online (vers\u00e3o simplificada dos commits) git log graph (inclui um desenho da \u00e1rvore de commits) Estes comando disponibilzam um c\u00f3digo (hash) que podemos utilizar para retornar a uma vers\u00e3o do projeto: git checkout hash_vers\u00e3o -> volta para as mudan\u00e7as deste commit. git checkout master -> desfaz essa ultima mudan\u00e7a e retorna para o ultimo commit realizado do projeto. Para desfazer um commit realizado tamb\u00e9m utilizamos o hash no comando: git reset --hard seu_hash \u00c9 possivel desfazer suas mudan\u00e7as no projeto antes de realizar um commit utilizando o comando: git diff. No entanto, se j\u00e1 tiver utilizado o 'git add' n\u00e3o \u00e9 poss\u00edvel usar ele e sim usar o comando: git heset head.","title":"Git e Github"},{"location":"estudos/Git%20e%20Github/Git_e_Github/#git-e-github","text":"","title":"Git e GitHub"},{"location":"estudos/Git%20e%20Github/Git_e_Github/#o-que-e-git-e-github","text":"Git \u00e9 um sistema de controle de vers\u00f5es amplamente utilizado para gerenciamento de projetos de software. Ele permite rastrear altera\u00e7\u00f5es no c\u00f3digo-fonte, facilitando a colabora\u00e7\u00e3o e o controle do hist\u00f3rico de desenvolvimento. GitHub, por sua vez, \u00e9 uma plataforma online para hospedagem de reposit\u00f3rios Git, funcionando tamb\u00e9m como uma rede social para desenvolvedores. Al\u00e9m de armazenar projetos remotamente, o GitHub oferece recursos para descoberta de projetos de outros usu\u00e1rios, colabora\u00e7\u00e3o e divulga\u00e7\u00e3o de portf\u00f3lios como este. Um elemento fundamental em todo reposit\u00f3rio \u00e9 o arquivo README.md, que serve como apresenta\u00e7\u00e3o e documenta\u00e7\u00e3o do projeto, facilitando o entendimento e poss\u00edveis contribui\u00e7\u00f5es. \u00c9 poss\u00edvel incrementar o README com selos informativos utilizando o shields.io , como status do projeto, tamanho do reposit\u00f3rio, licen\u00e7a, entre outras coisas relevantes.","title":"o que \u00e9 git e github"},{"location":"estudos/Git%20e%20Github/Git_e_Github/#configuracoes-iniciais-no-git-bash","text":"git config --global user.name \"seu_nome\" git config --global user.email \"seu_email\"","title":"configura\u00e7\u00f5es iniciais no git bash"},{"location":"estudos/Git%20e%20Github/Git_e_Github/#principais-comandos-git","text":"git init \u2013 Inicializa um novo reposit\u00f3rio local. git clone url_repositorio \u2013 Clona um reposit\u00f3rio remoto. git add arquivo OU git add . \u2013 Adiciona arquivos para o pr\u00f3ximo commit. git status \u2013 Exibe o status dos arquivos no diret\u00f3rio de trabalho. git commit -m 'texto do commit' \u2013 Registra as altera\u00e7\u00f5es feitas. git pull \u2013 Baixa as altera\u00e7\u00f5es do reposit\u00f3rio remoto. git push \u2013 Envia commits para o reposit\u00f3rio remoto.","title":"Principais Comandos Git"},{"location":"estudos/Git%20e%20Github/Git_e_Github/#branches","text":"Branches permitem criar diferentes linhas de desenvolvimento sem afetar o c\u00f3digo principal. Como criar e trocar de branch: Criando a branch: git branch nome_branch Trocando para a branch criada: git checkout nome_branch ou git switch nome_branch Criando e trocando: git switch -c nome_branch ou git checkout -b nome_branch Como mesclar as branchs: Volte para a branch principal: git checkout master ou git switch master Fa\u00e7a o merge: git merge nome_branch Deletar uma branch: git branch -d nome_branch","title":"Branches"},{"location":"estudos/Git%20e%20Github/Git_e_Github/#commits","text":"Podemos ter uma vis\u00e3o geral dos commits por meio do grafo de commits com os comandos: git log git log --online (vers\u00e3o simplificada dos commits) git log graph (inclui um desenho da \u00e1rvore de commits) Estes comando disponibilzam um c\u00f3digo (hash) que podemos utilizar para retornar a uma vers\u00e3o do projeto: git checkout hash_vers\u00e3o -> volta para as mudan\u00e7as deste commit. git checkout master -> desfaz essa ultima mudan\u00e7a e retorna para o ultimo commit realizado do projeto. Para desfazer um commit realizado tamb\u00e9m utilizamos o hash no comando: git reset --hard seu_hash \u00c9 possivel desfazer suas mudan\u00e7as no projeto antes de realizar um commit utilizando o comando: git diff. No entanto, se j\u00e1 tiver utilizado o 'git add' n\u00e3o \u00e9 poss\u00edvel usar ele e sim usar o comando: git heset head.","title":"Commits"},{"location":"estudos/angular/angular/","text":"","title":"Angular"},{"location":"estudos/conceitos/","text":"\u27ad Api REST \u27ad SOLID","title":"Index"},{"location":"estudos/conceitos/#api-rest","text":"","title":"\u27ad Api REST"},{"location":"estudos/conceitos/#solid","text":"","title":"\u27ad SOLID"},{"location":"estudos/conceitos/Api_Rest/","text":"","title":"Api Rest"},{"location":"estudos/conceitos/solid/","text":"SOLID Os princ\u00edpios SOLID s\u00e3o um conjunto de boas pr\u00e1ticas para tornar o c\u00f3digo mais limpo, organizado, f\u00e1cil de entender e manter. Eles ajudam a evitar c\u00f3digo desorganizado e dif\u00edcil de modificar ou expandir no posteriormente. 1. Single Responsibility Principle \u2013 Princ\u00edpio da Responsabilidade \u00danica Cada classe deve ter apenas uma responsabilidade, ou seja, cada classe deve fazer uma \u00fanica coisa no sistema. 2. Open-Closed Principle \u2013 Princ\u00edpio Aberto-Fechado O c\u00f3digo deve ser aberto para extens\u00e3o, mas fechado para modifica\u00e7\u00e3o. Podem ser adicionadas novas funcionalidades sem precisar alterar o c\u00f3digo que j\u00e1 existe. 3. Liskov Substitution Principle (LSP) \u2013 Princ\u00edpio da Substitui\u00e7\u00e3o de Liskov Voc\u00ea deve poder usar algo de uma classe filha (que herda algo) no lugar da classe pai (base) sem quebrar o funcionamento do programa. 4. Interface Segregation Principle (ISP) \u2013 Princ\u00edpio da Segrega\u00e7\u00e3o de Interface Evitar criar interfaces grandes e gen\u00e9ricas. \u00c9 melhor dividir as interfaces em partes menores e mais espec\u00edficas, para que as classes implementem apenas os m\u00e9todos que realmente utilizam. 5. Dependency Inversion Principle (DIP) \u2013 Princ\u00edpio da Invers\u00e3o de Depend\u00eancia Para o c\u00f3digo continuar flexivel e f\u00e1cil de testar as classes devem depender de abstra\u00e7\u00f5es (interfaces), e n\u00e3o de implementa\u00e7\u00f5es concretas (classes espec\u00edficas). Como por exemplo uma classe pedido n\u00e3o criar um metodo pagamento cart\u00e3o, e sim depender de uma interface pagamento (assim poderiamos mudar o metodo de pagamento por exemplo).","title":"SOLID"},{"location":"estudos/conceitos/solid/#solid","text":"Os princ\u00edpios SOLID s\u00e3o um conjunto de boas pr\u00e1ticas para tornar o c\u00f3digo mais limpo, organizado, f\u00e1cil de entender e manter. Eles ajudam a evitar c\u00f3digo desorganizado e dif\u00edcil de modificar ou expandir no posteriormente.","title":"SOLID"},{"location":"estudos/conceitos/solid/#1-single-responsibility-principle-principio-da-responsabilidade-unica","text":"Cada classe deve ter apenas uma responsabilidade, ou seja, cada classe deve fazer uma \u00fanica coisa no sistema.","title":"1. Single Responsibility Principle \u2013 Princ\u00edpio da Responsabilidade \u00danica"},{"location":"estudos/conceitos/solid/#2-open-closed-principle-principio-aberto-fechado","text":"O c\u00f3digo deve ser aberto para extens\u00e3o, mas fechado para modifica\u00e7\u00e3o. Podem ser adicionadas novas funcionalidades sem precisar alterar o c\u00f3digo que j\u00e1 existe.","title":"2. Open-Closed Principle \u2013 Princ\u00edpio Aberto-Fechado"},{"location":"estudos/conceitos/solid/#3-liskov-substitution-principle-lsp-principio-da-substituicao-de-liskov","text":"Voc\u00ea deve poder usar algo de uma classe filha (que herda algo) no lugar da classe pai (base) sem quebrar o funcionamento do programa.","title":"3. Liskov Substitution Principle (LSP) \u2013 Princ\u00edpio da Substitui\u00e7\u00e3o de Liskov"},{"location":"estudos/conceitos/solid/#4-interface-segregation-principle-isp-principio-da-segregacao-de-interface","text":"Evitar criar interfaces grandes e gen\u00e9ricas. \u00c9 melhor dividir as interfaces em partes menores e mais espec\u00edficas, para que as classes implementem apenas os m\u00e9todos que realmente utilizam.","title":"4. Interface Segregation Principle (ISP) \u2013 Princ\u00edpio da Segrega\u00e7\u00e3o de Interface"},{"location":"estudos/conceitos/solid/#5-dependency-inversion-principle-dip-principio-da-inversao-de-dependencia","text":"Para o c\u00f3digo continuar flexivel e f\u00e1cil de testar as classes devem depender de abstra\u00e7\u00f5es (interfaces), e n\u00e3o de implementa\u00e7\u00f5es concretas (classes espec\u00edficas). Como por exemplo uma classe pedido n\u00e3o criar um metodo pagamento cart\u00e3o, e sim depender de uma interface pagamento (assim poderiamos mudar o metodo de pagamento por exemplo).","title":"5. Dependency Inversion Principle (DIP) \u2013 Princ\u00edpio da Invers\u00e3o de Depend\u00eancia"},{"location":"estudos/quarkus/quarkus/","text":"","title":"Quarkus"},{"location":"estudos/springboot/springboot/","text":"SpringBoot Spring Boot \u00e9 um framework que facilita o desenvolvimento de aplica\u00e7\u00f5es em Java, especialmente APIs e microsservi\u00e7os. Ele foi criado para simplificar a configura\u00e7\u00e3o e acelerar o processo de cria\u00e7\u00e3o de aplica\u00e7\u00f5es. Com o Spring Boot, voc\u00ea consegue come\u00e7ar um projeto com o m\u00ednimo de configura\u00e7\u00e3o manual, pois ele j\u00e1 vem com v\u00e1rias configura\u00e7\u00f5es padr\u00e3o prontas para uso. Al\u00e9m disso ele inclui um servidor embutido (como o Tomcat), o que permite executar a aplica\u00e7\u00e3o diretamente, elimando o uso do terminal para rodar a aplica\u00e7\u00e3o por exemplo. Criar um projeto utilizando o springboot \u00e9 muito simples utilizando o SpringInitilzr ele permite gerar um esqueleto de projeto Spring com as depend\u00eancias que voc\u00ea precisa, tudo de forma simples e r\u00e1pida.","title":"SpringBoot"},{"location":"estudos/springboot/springboot/#springboot","text":"Spring Boot \u00e9 um framework que facilita o desenvolvimento de aplica\u00e7\u00f5es em Java, especialmente APIs e microsservi\u00e7os. Ele foi criado para simplificar a configura\u00e7\u00e3o e acelerar o processo de cria\u00e7\u00e3o de aplica\u00e7\u00f5es. Com o Spring Boot, voc\u00ea consegue come\u00e7ar um projeto com o m\u00ednimo de configura\u00e7\u00e3o manual, pois ele j\u00e1 vem com v\u00e1rias configura\u00e7\u00f5es padr\u00e3o prontas para uso. Al\u00e9m disso ele inclui um servidor embutido (como o Tomcat), o que permite executar a aplica\u00e7\u00e3o diretamente, elimando o uso do terminal para rodar a aplica\u00e7\u00e3o por exemplo. Criar um projeto utilizando o springboot \u00e9 muito simples utilizando o SpringInitilzr ele permite gerar um esqueleto de projeto Spring com as depend\u00eancias que voc\u00ea precisa, tudo de forma simples e r\u00e1pida.","title":"SpringBoot"},{"location":"estudos/testes/testes/","text":"","title":"Testes"}]}